#!/usr/bin/env bash



absolute_path() {
    # if the given path to the kscript launcher is absolute (i.e. it is either starting with / or a
    # 'letter:/' when using gitbash on windows) it is returned unchanged, otherwise we construct an absolute path
    [[ $1 = /* ]] || [[ $1 =~ ^[A-z]:/ ]] && echo "$1" || echo "$PWD/${1#./}"
}

resolve_symlink() (
    if [[ $OSTYPE != darwin* ]]; then minusFarg="-f"; fi
    sym_resolved=$(readlink ${minusFarg} $1)

    if [[ -n $sym_resolved ]]; then
        echo $sym_resolved
    else
        echo $1
    fi
)


abs_kscript_path=$(resolve_symlink $(absolute_path $0))

## resolve application jar path from script location and convert to windows path when using cygwin
jarPath=$(dirname $abs_kscript_path)/kscript.jar
if [[ $(uname) == CYGWIN* ]]; then jarPath=$(cygpath -w ${jarPath}); fi

## prefer KOTLIN_HOME instead of PATH to resolve `kotlin` location (see #145)
if [[ -z "$KOTLIN_HOME" ]]; then KOTLIN_EXEC="kotlin"; else KOTLIN_EXEC="$KOTLIN_HOME/bin/kotlin"; fi

## expose the name of the script being run to the script itself
export KSCRIPT_FILE="$1"

for i in "$@"
do
    case $i in
        --experimental)
        EXPERIMENTAL=1
        ;;
    esac
done

if [[ $EXPERIMENTAL -eq 1 ]]
then
    ## run it using command substitution to have just the user process once kscript is done
    SCRIPT_OUT="$(${KOTLIN_EXEC} -Dkotlin.script.classpath=${jarPath} -classpath ${jarPath} kscript.app.KscriptKt "$@")"

    echo "${SCRIPT_OUT}"
else
    ## run it using command substitution to have just the user process once kscript is done
    SCRIPT_OUT="$(${KOTLIN_EXEC} -classpath ${jarPath} kscript.app.KscriptKt "$@")"

    eval "${SCRIPT_OUT}"
fi
